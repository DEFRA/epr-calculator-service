// <auto-generated />
using System;
using EPR.Calculator.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EPR.Calculator.API.Data.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20241104130025_AddNewColumnLapcapFileNameToLapcapDataMaster")]
    partial class AddNewColumnLapcapFileNameToLapcapDataMaster
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.CalculatorRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CalculatorRunClassificationId")
                        .HasColumnType("int")
                        .HasColumnName("calculator_run_classification_id");

                    b.Property<int?>("CalculatorRunOrganisationDataMasterId")
                        .HasColumnType("int")
                        .HasColumnName("calculator_run_organization_data_master_id");

                    b.Property<int?>("CalculatorRunPomDataMasterId")
                        .HasColumnType("int")
                        .HasColumnName("calculator_run_pom_data_master_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("created_by");

                    b.Property<int?>("DefaultParameterSettingMasterId")
                        .HasColumnType("int")
                        .HasColumnName("default_parameter_setting_master_id");

                    b.Property<string>("Financial_Year")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("financial_year");

                    b.Property<int?>("LapcapDataMasterId")
                        .HasColumnType("int")
                        .HasColumnName("lapcap_data_master_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CalculatorRunClassificationId");

                    b.HasIndex("CalculatorRunOrganisationDataMasterId");

                    b.HasIndex("CalculatorRunPomDataMasterId");

                    b.HasIndex("DefaultParameterSettingMasterId");

                    b.HasIndex("LapcapDataMasterId");

                    b.ToTable("calculator_run");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.CalculatorRunClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("created_by");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("calculator_run_classification");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 4, 13, 0, 24, 988, DateTimeKind.Local).AddTicks(9020),
                            CreatedBy = "Test User",
                            Status = "IN THE QUEUE"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 4, 13, 0, 24, 988, DateTimeKind.Local).AddTicks(9023),
                            CreatedBy = "Test User",
                            Status = "RUNNING"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 4, 13, 0, 24, 988, DateTimeKind.Local).AddTicks(9025),
                            CreatedBy = "Test User",
                            Status = "UNCLASSIFIED"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 11, 4, 13, 0, 24, 988, DateTimeKind.Local).AddTicks(9027),
                            CreatedBy = "Test User",
                            Status = "PLAY"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 11, 4, 13, 0, 24, 988, DateTimeKind.Local).AddTicks(9029),
                            CreatedBy = "Test User",
                            Status = "ERROR"
                        });
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.CalculatorRunOrganisationDataDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CalculatorRunOrganisationDataMasterId")
                        .HasColumnType("int")
                        .HasColumnName("calculator_run_organization_data_master_id");

                    b.Property<DateTime>("LoadTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("load_ts");

                    b.Property<int?>("OrganisationId")
                        .HasColumnType("int")
                        .HasColumnName("organisation_id");

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("organisation_name");

                    b.Property<string>("SubmissionPeriodDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("submission_period_desc");

                    b.Property<string>("SubsidaryId")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("subsidiary_id");

                    b.HasKey("Id");

                    b.HasIndex("CalculatorRunOrganisationDataMasterId");

                    b.ToTable("calculator_run_organization_data_detail");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.CalculatorRunOrganisationDataMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CalendarYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("calendar_year");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("datetime2")
                        .HasColumnName("effective_from");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("datetime2")
                        .HasColumnName("effective_to");

                    b.HasKey("Id");

                    b.ToTable("calculator_run_organization_data_master");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.CalculatorRunPomDataDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CalculatorRunPomDataMasterId")
                        .HasColumnType("int")
                        .HasColumnName("calculator_run_pom_data_master_id");

                    b.Property<DateTime>("LoadTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("load_ts");

                    b.Property<int?>("OrganisationId")
                        .HasColumnType("int")
                        .HasColumnName("organisation_id");

                    b.Property<string>("PackagingActivity")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("packaging_activity");

                    b.Property<string>("PackagingClass")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("packaging_class");

                    b.Property<string>("PackagingMaterial")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("packaging_material");

                    b.Property<double?>("PackagingMaterialWeight")
                        .HasColumnType("float")
                        .HasColumnName("packaging_material_weight");

                    b.Property<string>("PackagingType")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("packaging_type");

                    b.Property<string>("SubmissionPeriod")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("submission_period");

                    b.Property<string>("SubmissionPeriodDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("submission_period_desc");

                    b.Property<string>("SubsidaryId")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("subsidiary_id");

                    b.HasKey("Id");

                    b.HasIndex("CalculatorRunPomDataMasterId");

                    b.ToTable("calculator_run_pom_data_detail");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.CalculatorRunPomDataMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CalendarYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("calendar_year");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("datetime2")
                        .HasColumnName("effective_from");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("datetime2")
                        .HasColumnName("effective_to");

                    b.HasKey("Id");

                    b.ToTable("calculator_run_pom_data_master");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.CostType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("cost_type");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("country");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.CountryApportionment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Apportionment")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("apportionment");

                    b.Property<int>("CalculatorRunId")
                        .HasColumnType("int")
                        .HasColumnName("calculator_run_id");

                    b.Property<int>("CostTypeId")
                        .HasColumnType("int")
                        .HasColumnName("cost_type_id");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.HasKey("Id");

                    b.HasIndex("CalculatorRunId");

                    b.HasIndex("CostTypeId");

                    b.HasIndex("CountryId");

                    b.ToTable("country_apportionment");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.DefaultParameterSettingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DefaultParameterSettingMasterId")
                        .HasColumnType("int")
                        .HasColumnName("default_parameter_setting_master_id");

                    b.Property<string>("ParameterUniqueReferenceId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("parameter_unique_ref");

                    b.Property<decimal>("ParameterValue")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("parameter_value");

                    b.HasKey("Id");

                    b.HasIndex("DefaultParameterSettingMasterId");

                    b.HasIndex("ParameterUniqueReferenceId");

                    b.ToTable("default_parameter_setting_detail");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.DefaultParameterSettingMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("datetime2")
                        .HasColumnName("effective_from");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("datetime2")
                        .HasColumnName("effective_to");

                    b.Property<string>("ParameterFileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("parameter_filename");

                    b.Property<string>("ParameterYear")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("parameter_year");

                    b.HasKey("Id");

                    b.ToTable("default_parameter_setting_master");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.DefaultParameterTemplateMaster", b =>
                {
                    b.Property<string>("ParameterUniqueReferenceId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("parameter_unique_ref");

                    b.Property<string>("ParameterCategory")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("parameter_category");

                    b.Property<string>("ParameterType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("parameter_type");

                    b.Property<decimal>("ValidRangeFrom")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18, 3)")
                        .HasColumnName("valid_Range_from");

                    b.Property<decimal>("ValidRangeTo")
                        .HasPrecision(18, 3)
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("valid_Range_to");

                    b.HasKey("ParameterUniqueReferenceId");

                    b.ToTable("default_parameter_template_master");

                    b.HasData(
                        new
                        {
                            ParameterUniqueReferenceId = "COMC-AL",
                            ParameterCategory = "Communication costs",
                            ParameterType = "Aluminium",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "COMC-FC",
                            ParameterCategory = "Communication costs",
                            ParameterType = "Fibre composite",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "COMC-GL",
                            ParameterCategory = "Communication costs",
                            ParameterType = "Glass",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "COMC-PC",
                            ParameterCategory = "Communication costs",
                            ParameterType = "Paper or card",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "COMC-PL",
                            ParameterCategory = "Communication costs",
                            ParameterType = "Plastic",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "COMC-ST",
                            ParameterCategory = "Communication costs",
                            ParameterType = "Steel",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "COMC-WD",
                            ParameterCategory = "Communication costs",
                            ParameterType = "Wood",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "COMC-OT",
                            ParameterCategory = "Communication costs",
                            ParameterType = "Other",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "SAOC-ENG",
                            ParameterCategory = "Scheme administrator operating costs",
                            ParameterType = "England",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "SAOC-WLS",
                            ParameterCategory = "Scheme administrator operating costs",
                            ParameterType = "Wales",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "SAOC-SCT",
                            ParameterCategory = "Scheme administrator operating costs",
                            ParameterType = "Scotland",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "SAOC-NIR",
                            ParameterCategory = "Scheme administrator operating costs",
                            ParameterType = "Northern Ireland",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "LAPC-ENG",
                            ParameterCategory = "Local authority data preparation costs",
                            ParameterType = "England",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "LAPC-WLS",
                            ParameterCategory = "Local authority data preparation costs",
                            ParameterType = "Wales",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "LAPC-SCT",
                            ParameterCategory = "Local authority data preparation costs",
                            ParameterType = "Scotland",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "LAPC-NIR",
                            ParameterCategory = "Local authority data preparation costs",
                            ParameterType = "Northern Ireland",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "SCSC-ENG",
                            ParameterCategory = "Scheme setup costs",
                            ParameterType = "England",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "SCSC-WLS",
                            ParameterCategory = "Scheme setup costs",
                            ParameterType = "Wales",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "SCSC-SCT",
                            ParameterCategory = "Scheme setup costs",
                            ParameterType = "Scotland",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "SCSC-NIR",
                            ParameterCategory = "Scheme setup costs",
                            ParameterType = "Northern Ireland",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "LRET-AL",
                            ParameterCategory = "Late reporting tonnage",
                            ParameterType = "Aluminium",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "LRET-FC",
                            ParameterCategory = "Late reporting tonnage",
                            ParameterType = "Aluminium",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "LRET-GL",
                            ParameterCategory = "Late reporting tonnage",
                            ParameterType = "Aluminium",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "LRET-PC",
                            ParameterCategory = "Late reporting tonnage",
                            ParameterType = "Aluminium",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "LRET-PL",
                            ParameterCategory = "Late reporting tonnage",
                            ParameterType = "Aluminium",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "LRET-ST",
                            ParameterCategory = "Late reporting tonnage",
                            ParameterType = "Aluminium",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "LRET-WD",
                            ParameterCategory = "Late reporting tonnage",
                            ParameterType = "Aluminium",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "LRET-OT",
                            ParameterCategory = "Late reporting tonnage",
                            ParameterType = "Aluminium",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "BADEBT-P",
                            ParameterCategory = "Communication costs",
                            ParameterType = "Aluminium",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "MATT-AI",
                            ParameterCategory = "Materiality threshold",
                            ParameterType = "Amount Increase",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "MATT-AD",
                            ParameterCategory = "Materiality threshold",
                            ParameterType = "Amount Decrease",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "MATT-PI",
                            ParameterCategory = "Materiality threshold",
                            ParameterType = "Percent Increase",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 1000.00m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "MATT-PD",
                            ParameterCategory = "Materiality threshold",
                            ParameterType = "Percent Decrease",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = -1000.00m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "TONT-AI",
                            ParameterCategory = "Tonnage change threshold",
                            ParameterType = "Amount Increase",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "TONT-DI",
                            ParameterCategory = "Tonnage change threshold",
                            ParameterType = "Amount Decrease",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "TONT-PI",
                            ParameterCategory = "Tonnage change threshold",
                            ParameterType = "Percent Increase",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 1000.00m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "TONT-PD",
                            ParameterCategory = "Tonnage change threshold",
                            ParameterType = "Percent Decrease",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = -1000.00m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "LEVY-ENG",
                            ParameterCategory = "Levy",
                            ParameterType = "England",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "LEVY-WLS",
                            ParameterCategory = "Levy",
                            ParameterType = "Wales",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "LEVY-SCT",
                            ParameterCategory = "Levy",
                            ParameterType = "Scotland",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        },
                        new
                        {
                            ParameterUniqueReferenceId = "LEVY-NIR",
                            ParameterCategory = "Levy",
                            ParameterType = "Northern Ireland",
                            ValidRangeFrom = 0m,
                            ValidRangeTo = 999999999.99m
                        });
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.LapcapDataDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LapcapDataMasterId")
                        .HasColumnType("int")
                        .HasColumnName("lapcap_data_master_id");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_cost");

                    b.Property<string>("UniqueReference")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("lapcap_data_template_master_unique_ref");

                    b.HasKey("Id");

                    b.HasIndex("LapcapDataMasterId");

                    b.HasIndex("UniqueReference");

                    b.ToTable("lapcap_data_detail");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.LapcapDataMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("datetime2")
                        .HasColumnName("effective_from");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("datetime2")
                        .HasColumnName("effective_to");

                    b.Property<string>("LapcapFileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("lapcap_filename");

                    b.Property<string>("ProjectionYear")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("projection_year");

                    b.HasKey("Id");

                    b.ToTable("lapcap_data_master");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.LapcapDataTemplateMaster", b =>
                {
                    b.Property<string>("UniqueReference")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("unique_ref");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("country");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("material");

                    b.Property<decimal>("TotalCostFrom")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_cost_from");

                    b.Property<decimal>("TotalCostTo")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_cost_to");

                    b.HasKey("UniqueReference");

                    b.ToTable("lapcap_data_template_master");

                    b.HasData(
                        new
                        {
                            UniqueReference = "ENG-AL",
                            Country = "England",
                            Material = "Aluminium",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "ENG-FC",
                            Country = "England",
                            Material = "Fibre composite",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "ENG-GL",
                            Country = "England",
                            Material = "Glass",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "ENG-PC",
                            Country = "England",
                            Material = "Paper or card",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "ENG-PL",
                            Country = "England",
                            Material = "Plastic",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "ENG-ST",
                            Country = "England",
                            Material = "Steel",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "ENG-WD",
                            Country = "England",
                            Material = "Wood",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "ENG-OT",
                            Country = "England",
                            Material = "Other",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "NI-AL",
                            Country = "NI",
                            Material = "Aluminium",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "NI-FC",
                            Country = "NI",
                            Material = "Fibre composite",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "NI-GL",
                            Country = "NI",
                            Material = "Glass",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "NI-PC",
                            Country = "NI",
                            Material = "Paper or card",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "NI-PL",
                            Country = "NI",
                            Material = "Plastic",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "NI-ST",
                            Country = "NI",
                            Material = "Steel",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "NI-WD",
                            Country = "NI",
                            Material = "Wood",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "NI-OT",
                            Country = "NI",
                            Material = "Other",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "SCT-AL",
                            Country = "Scotland",
                            Material = "Aluminium",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "SCT-FC",
                            Country = "Scotland",
                            Material = "Fibre composite",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "SCT-GL",
                            Country = "Scotland",
                            Material = "Glass",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "SCT-PC",
                            Country = "Scotland",
                            Material = "Paper or card",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "SCT-PL",
                            Country = "Scotland",
                            Material = "Plastic",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "SCT-ST",
                            Country = "Scotland",
                            Material = "Steel",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "SCT-WD",
                            Country = "Scotland",
                            Material = "Wood",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "SCT-OT",
                            Country = "Scotland",
                            Material = "Other",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "WLS-AL",
                            Country = "Wales",
                            Material = "Aluminium",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "WLS-FC",
                            Country = "Wales",
                            Material = "Fibre composite",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "WLS-GL",
                            Country = "Wales",
                            Material = "Glass",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "WLS-PC",
                            Country = "Wales",
                            Material = "Paper or card",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "WLS-PL",
                            Country = "Wales",
                            Material = "Plastic",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "WLS-ST",
                            Country = "Wales",
                            Material = "Steel",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "WLS-WD",
                            Country = "Wales",
                            Material = "Wood",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        },
                        new
                        {
                            UniqueReference = "WLS-OT",
                            Country = "Wales",
                            Material = "Other",
                            TotalCostFrom = 0m,
                            TotalCostTo = 999999999.99m
                        });
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("material");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.OrganisationData", b =>
                {
                    b.Property<DateTime>("LoadTimestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("load_ts");

                    b.Property<int?>("OrganisationId")
                        .HasColumnType("int")
                        .HasColumnName("organisation_id");

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("organisation_name");

                    b.Property<string>("SubmissionPeriodDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("submission_period_desc");

                    b.Property<string>("SubsidaryId")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("subsidiary_id");

                    b.ToTable("organisation_data");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.PomData", b =>
                {
                    b.Property<DateTime>("LoadTimeStamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("load_ts");

                    b.Property<int?>("OrganisationId")
                        .HasColumnType("int")
                        .HasColumnName("organisation_id");

                    b.Property<string>("PackagingActivity")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("packaging_activity");

                    b.Property<string>("PackagingClass")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("packaging_class");

                    b.Property<string>("PackagingMaterial")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("packaging_material");

                    b.Property<double?>("PackagingMaterialWeight")
                        .HasColumnType("float")
                        .HasColumnName("packaging_material_weight");

                    b.Property<string>("PackagingType")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("packaging_type");

                    b.Property<string>("SubmissionPeriod")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("submission_period");

                    b.Property<string>("SubmissionPeriodDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("submission_period_desc");

                    b.Property<string>("SubsidaryId")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("subsidiary_id");

                    b.ToTable("pom_data");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.ProducerDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CalculatorRunId")
                        .HasColumnType("int")
                        .HasColumnName("calculator_run_id");

                    b.Property<int>("ProducerId")
                        .HasColumnType("int")
                        .HasColumnName("producer_id");

                    b.Property<string>("ProducerName")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("producer_name");

                    b.Property<string>("SubsidiaryId")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("subsidiary_id");

                    b.HasKey("Id");

                    b.HasIndex("CalculatorRunId");

                    b.ToTable("producer_detail");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.ProducerReportedMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MaterialId")
                        .HasColumnType("int")
                        .HasColumnName("material_id");

                    b.Property<decimal>("PackagingTonnage")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("packaging_tonnage");

                    b.Property<string>("PackagingType")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasColumnName("packaging_type");

                    b.Property<int>("ProducerDetailId")
                        .HasColumnType("int")
                        .HasColumnName("producer_detail_id");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProducerDetailId");

                    b.ToTable("producer_reported_material");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.CalculatorRun", b =>
                {
                    b.HasOne("EPR.Calculator.API.Data.DataModels.CalculatorRunClassification", null)
                        .WithMany("CalculatorRunDetails")
                        .HasForeignKey("CalculatorRunClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.Calculator.API.Data.DataModels.CalculatorRunOrganisationDataMaster", "CalculatorRunOrganisationDataMaster")
                        .WithMany("RunDetails")
                        .HasForeignKey("CalculatorRunOrganisationDataMasterId");

                    b.HasOne("EPR.Calculator.API.Data.DataModels.CalculatorRunPomDataMaster", "CalculatorRunPomDataMaster")
                        .WithMany("RunDetails")
                        .HasForeignKey("CalculatorRunPomDataMasterId");

                    b.HasOne("EPR.Calculator.API.Data.DataModels.DefaultParameterSettingMaster", "DefaultParameterSettingMaster")
                        .WithMany("RunDetails")
                        .HasForeignKey("DefaultParameterSettingMasterId");

                    b.HasOne("EPR.Calculator.API.Data.DataModels.LapcapDataMaster", "LapcapDataMaster")
                        .WithMany("RunDetails")
                        .HasForeignKey("LapcapDataMasterId");

                    b.Navigation("CalculatorRunOrganisationDataMaster");

                    b.Navigation("CalculatorRunPomDataMaster");

                    b.Navigation("DefaultParameterSettingMaster");

                    b.Navigation("LapcapDataMaster");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.CalculatorRunOrganisationDataDetail", b =>
                {
                    b.HasOne("EPR.Calculator.API.Data.DataModels.CalculatorRunOrganisationDataMaster", "CalculatorRunOrganisationDataMaster")
                        .WithMany("Details")
                        .HasForeignKey("CalculatorRunOrganisationDataMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalculatorRunOrganisationDataMaster");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.CalculatorRunPomDataDetail", b =>
                {
                    b.HasOne("EPR.Calculator.API.Data.DataModels.CalculatorRunPomDataMaster", "CalculatorRunPomDataMaster")
                        .WithMany("Details")
                        .HasForeignKey("CalculatorRunPomDataMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalculatorRunPomDataMaster");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.CountryApportionment", b =>
                {
                    b.HasOne("EPR.Calculator.API.Data.DataModels.CalculatorRun", "CalculatorRun")
                        .WithMany("CountryApportionments")
                        .HasForeignKey("CalculatorRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.Calculator.API.Data.DataModels.CostType", "CostType")
                        .WithMany("CountryApportionments")
                        .HasForeignKey("CostTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.Calculator.API.Data.DataModels.Country", "Country")
                        .WithMany("CountryApportionments")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalculatorRun");

                    b.Navigation("CostType");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.DefaultParameterSettingDetail", b =>
                {
                    b.HasOne("EPR.Calculator.API.Data.DataModels.DefaultParameterSettingMaster", "DefaultParameterSettingMaster")
                        .WithMany("Details")
                        .HasForeignKey("DefaultParameterSettingMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.Calculator.API.Data.DataModels.DefaultParameterTemplateMaster", "ParameterUniqueReference")
                        .WithMany()
                        .HasForeignKey("ParameterUniqueReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultParameterSettingMaster");

                    b.Navigation("ParameterUniqueReference");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.LapcapDataDetail", b =>
                {
                    b.HasOne("EPR.Calculator.API.Data.DataModels.LapcapDataMaster", "LapcapDataMaster")
                        .WithMany("Details")
                        .HasForeignKey("LapcapDataMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.Calculator.API.Data.DataModels.LapcapDataTemplateMaster", "LapcapDataTemplateMaster")
                        .WithMany("Details")
                        .HasForeignKey("UniqueReference")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LapcapDataMaster");

                    b.Navigation("LapcapDataTemplateMaster");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.ProducerDetail", b =>
                {
                    b.HasOne("EPR.Calculator.API.Data.DataModels.CalculatorRun", "CalculatorRun")
                        .WithMany("ProducerDetails")
                        .HasForeignKey("CalculatorRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalculatorRun");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.ProducerReportedMaterial", b =>
                {
                    b.HasOne("EPR.Calculator.API.Data.DataModels.Material", "Material")
                        .WithMany("ProducerReportedMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EPR.Calculator.API.Data.DataModels.ProducerDetail", "ProducerDetail")
                        .WithMany("ProducerReportedMaterials")
                        .HasForeignKey("ProducerDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("ProducerDetail");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.CalculatorRun", b =>
                {
                    b.Navigation("CountryApportionments");

                    b.Navigation("ProducerDetails");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.CalculatorRunClassification", b =>
                {
                    b.Navigation("CalculatorRunDetails");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.CalculatorRunOrganisationDataMaster", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("RunDetails");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.CalculatorRunPomDataMaster", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("RunDetails");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.CostType", b =>
                {
                    b.Navigation("CountryApportionments");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.Country", b =>
                {
                    b.Navigation("CountryApportionments");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.DefaultParameterSettingMaster", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("RunDetails");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.LapcapDataMaster", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("RunDetails");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.LapcapDataTemplateMaster", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.Material", b =>
                {
                    b.Navigation("ProducerReportedMaterials");
                });

            modelBuilder.Entity("EPR.Calculator.API.Data.DataModels.ProducerDetail", b =>
                {
                    b.Navigation("ProducerReportedMaterials");
                });
#pragma warning restore 612, 618
        }
    }
}
